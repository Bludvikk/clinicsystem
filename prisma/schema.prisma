generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int               @id @default(autoincrement())
  userName        String            @unique
  email           String            @unique
  password        String
  firstName       String
  lastName        String
  middleInitial   String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  deletedAt       DateTime?
  roleId          Int
  statusId        Int
  departmentId    Int?
  role            Reference         @relation("user_roleIdToReference", fields: [roleId], references: [id])
  department      Reference?        @relation("user_departmentIdToReference", fields: [departmentId], references: [id])
  status          Reference         @relation("user_statusIdToReference", fields: [statusId], references: [id])
  physicalCheckup PhysicalCheckup[] @relation("physicalCheckup_physicianIdToUser")
  vitalSigns      VitalSign[]       @relation("vitalSign_physicianIdToUser")
  receptionist    VitalSign[]       @relation("vitalSign_receptionistIdToUser")
}

model Entity {
  id        Int         @id @default(autoincrement())
  code      String      @unique
  name      String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
  deletedAt DateTime?
  isShow    Boolean     @default(true)
  isDefault Boolean     @default(false)
  isParent  Boolean     @default(false)
  parentId  Int?
  fieldProp String
  parent    Entity?     @relation("entityToEntity", fields: [parentId], references: [id])
  entity    Entity[]    @relation("entityToEntity")
  reference Reference[]
}

model Reference {
  id                    Int       @id @default(autoincrement())
  code                  String    @unique
  name                  String
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @default(now()) @updatedAt
  deletedAt             DateTime?
  isShow                Boolean   @default(true)
  isDefault             Boolean   @default(false)
  entityId              Int
  entity                Entity    @relation(fields: [entityId], references: [id], onDelete: Cascade)
  patient_genderId      Patient[] @relation("patient_genderIdToReference")
  patient_occupationId  Patient[] @relation("patient_occupationIdToReference")
  patient_civilStatusId Patient[] @relation("patient_civilStatusIdToReference")
  user_roleId           User[]    @relation("user_roleIdToReference")
  user_departmentId     User[]    @relation("user_departmentIdToReference")
  user_statusId         User[]    @relation("user_statusIdToReference")
}

model Patient {
  id                 Int               @id @default(autoincrement())
  firstName          String
  lastName           String
  middleInitial      String?
  address            String
  dateOfBirth        DateTime
  civilStatusId      Int
  age                Int
  occupationId       Int
  genderId           Int
  contactNumber      String?
  familyHistory      Json
  personalHistory    Json
  pastMedicalHistory Json
  obGyne             Json?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  gender             Reference         @relation("patient_genderIdToReference", fields: [genderId], references: [id])
  occupation         Reference         @relation("patient_occupationIdToReference", fields: [occupationId], references: [id])
  civilStatus        Reference         @relation("patient_civilStatusIdToReference", fields: [civilStatusId], references: [id])
  physicalCheckup    PhysicalCheckup[] @relation("physicalCheckup_patientIdToPatient")
  vitalSigns         VitalSign[]       @relation("vitalSign_patientIdToPatient")
}

model PhysicalCheckup {
  id                 Int       @id @default(autoincrement())
  patientId          Int
  physicianId        Int
  vitalSignId        Int       @unique
  diagnoses          Json
  treatments         Json
  dietaryAdviseGiven String?
  followUp           DateTime?
  createAt           DateTime  @default(now())
  patient            Patient   @relation("physicalCheckup_patientIdToPatient", fields: [patientId], references: [id], onDelete: Cascade)
  physician          User      @relation("physicalCheckup_physicianIdToUser", fields: [physicianId], references: [id])
  vitalSign          VitalSign @relation("physicalCheckup_vitalSignIdToVitalSign", fields: [vitalSignId], references: [id], onDelete: Cascade)
}

model VitalSign {
  id              Int              @id @default(autoincrement())
  t               Int
  p               Int
  r               Int
  bp              String
  wt              Int
  ht              Int
  cbg             Int
  patientId       Int
  physicianId     Int
  receptionistId  Int
  createdAt       DateTime         @default(now())
  patient         Patient          @relation("vitalSign_patientIdToPatient", fields: [patientId], references: [id])
  physician       User             @relation("vitalSign_physicianIdToUser", fields: [physicianId], references: [id])
  receptionist    User             @relation("vitalSign_receptionistIdToUser", fields: [receptionistId], references: [id])
  physicalCheckup PhysicalCheckup? @relation("physicalCheckup_vitalSignIdToVitalSign")
}
